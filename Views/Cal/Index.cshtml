<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />

    <script src='~/fullcalendar-6.1.10/dist/index.global.js'></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>

    <style>
        body {
            margin: 40px 10px;
            padding: 0;
            font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
            font-size: 14px;
        }

        #calendar {
            max-width: 1100px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id='calendar'></div>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');

            var calendar = new FullCalendar.Calendar(calendarEl, {
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                initialView: 'dayGridMonth', // Default view when the calendar first loads
                views: {
                    week: { // Configuration for the week view
                        type: 'timeGridWeek', // Display events in a grid for each day with time slots
                        duration: { days: 7 }, // Set the duration of the week view to 7 days
                        buttonText: 'Week' // Text to display for the week view button
                    },
                    day: { // Configuration for the day view
                        type: 'timeGridDay', // Display events in a grid for the current day with time slots
                        duration: { days: 1 }, // Set the duration of the day view to 1 day
                        buttonText: 'Day' // Text to display for the day view button
                    }
                },
                events: '/Task/GetTasks', // Endpoint to fetch tasks
                eventClick: function (info) {
                    // Handle event click if needed
                    console.log('Event clicked:', info.event);
                },
                editable: true, // Enable event dragging and resizing
                eventDrop: function (event) {
                    updateTask(event);
                },
                eventResize: function (event) {
                    updateTask(event);
                }
            });

            

            calendar.render();

            function updateTask(event) {
                var taskId = event.extendedProps.id; // Extracting taskId from the event object
                var start = event.start.toISOString(); // Converting start time to ISO string
                var end = event.end ? event.end.toISOString() : null; // Converting end time to ISO string if present

                // Making AJAX POST request to UpdateTask endpoint with taskId, start, and end parameters
                $.ajax({
                    type: 'POST',
                    url: '/Task/UpdateTask',
                    data: {
                        taskId: taskId,
                        start: start,
                        end: end
                    },
                    success: function (response) {
                        console.log('Task updated successfully:', response);
                    },
                    error: function (error) {
                        console.error('Error updating task:', error);
                    }
                });
            }
        });
    </script>

</body>
</html>
