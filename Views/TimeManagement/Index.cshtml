@model TESTT.ViewModels.TimeManagementViewModel
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="CatchTIME Dashboard">
    <meta name="author" content="Matrouh Univeristy">
    <!-- Boxicons -->
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Custom CSS -->
    <link rel="stylesheet" href="@Url.Content("~/css/Dashboard/style.css")">

    <title>CatchTIME</title>
    <style>
        .container-wrapper {
            display: inline-block;
            vertical-align: top;
            position: relative;
            margin: 20px;
        }

        .title-wrapper {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        #details-container {
            font-family: var(--poppins);
        }

        .t-container {
            font-family: var(--poppins);
            font-size: 25px;
            font-weight : bold;
            padding: 10px;
        }

        .l-container {
            font-family: var(--poppins);
            font-size: 25px;
            font-weight: bold;
            padding: 10px;
        }
        #l-container, #t-container, #details-container {
            height: 700px;
            width: 300px;
            margin-top: 10px;
            border-radius: 15px;
            box-shadow: 1px 2px 10px 0px rgba(0,0,0,0.3);
            background: rgb(143, 143, 143); /* Old browsers */
            background: -moz-linear-gradient(45deg, rgb(194, 197, 188) 0%, rgba(192,234,103,1) 99%); /* FF3.6-15 */
            background: -webkit-linear-gradient(45deg, rgb(53, 138, 198) 0%,rgba(192,234,103,1) 99%); /* Chrome10-25,Safari5.1-6 */
            background: linear-gradient(45deg, rgb(27, 139, 186) 0%,rgb(255, 255, 255) 99%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#9bc635', endColorstr='#c0ea67',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
        }

        #Lst {
            font-family: var(--poppins);
            padding: 10px;
            font-weight: bold;
        }

        p {
            font-family: var(--poppins);
            padding: 10px;
            font-weight: bold;
        }

        .plus {
            font-size: 18px;
            cursor: pointer;
        }

        #logo-collapse {
            margin-top: 80px;
            margin-left: 10px;
        }

        .title {
            font-family: var(--poppins);
            font-size: 30px;
            font-weight: bold;
        }

        .task-detail {
            padding: 20px;
        }

        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .task-title {
            font-size: 24px;
            font-weight: bold;
        }

        .task-priority {
            font-size: 16px;
            font-weight: normal;
            margin-left: 10px;
            color: var(--red);
        }

        .task-date {
            font-size: 10px;
            color: var(--dark-grey);
        }

        .task-description {
            font-size: 14px;
            margin-top: 10px;
            color: var(--dark);
        }

        .task-difficulty {
            font-size: 14px;
            margin-top: 5px;
            color: var(--dark-grey);
        }

        .task-status {
            font-size: 14px;
            margin-top: 5px;
            color: var(--blue);
        }

        hr {
            margin: 20px 0;
            border: none;
            border-top: 1px solid var(--grey);
        }

        .task-notes label {
            display: block;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .Lst {
            cursor: pointer;
            color: blue;
            text-decoration: underline;
        }

            .Lst:hover {
                color: darkblue;
            }
        #notes {
            width: 100%;
            height: 100px;
            padding: 10px;
            border: 1px solid var(--grey);
            border-radius: 5px;
            font-family: var(--poppins);
            resize: none;
            max-height: calc(100% - 200px); /* Adjust this value to fit your design */
            overflow: auto;
        }

        #logo-collapse {
            margin-top: 80px;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <!-- SIDEBAR -->
    <aside id="sidebar" role="navigation">
        <a href="@Url.Action("Index", "Dashboard")" class="brand">
            <img src="@Url.Content("~/Dashboard_Images/Main.png")" alt="CatchTIME" width="200" height="200"
                 id="logo-collapse">
        </a>
        <ul class="side-menu top">
            <li class="active">
                <a href="@Url.Action("Index", "Dashboard")">
                    <i class='bx bxs-dashboard'></i>
                    <span class="text">Dashboard</span>
                </a>
            </li>
            <li class="tasks-dropdown">
                <a href="@Url.Action("Index","TimeManagement")">
                    <i class='bx bxs-check-circle'></i>
                    <span class="text">Tasks</span>
                </a>
            </li>
            <li>
                <a href="#">
                    <i class='bx bxs-bar-chart-alt-2'></i>
                    <span class="text">Insights</span>
                </a>
            </li>
            <li>
                <a href="@Url.Action("Index","Pomodoro")">
                    <i class='bx bxs-timer'></i>
                    <span class="text">Pomodoro</span>
                </a>
            </li>
            <li>
                <a href="@Url.Action("Index","Cal")">
                    <i class='bx bxs-calendar'></i>
                    <span class="text">Calendar</span>
                </a>
            </li>
        </ul>
        <ul class="side-menu">
            <li>
                <a href="#">
                    <i class='bx bxs-cog'></i>
                    <span class="text">Settings</span>
                </a>
            </li>
            <li>
                <!-- Change this to a form to handle the logout -->
                <form asp-action="Logout" asp-controller="Account" method="post" class="logout-form">
                    <button type="submit" class="logout">
                        <i class='bx bxs-log-out-circle'></i>
                        <span class="text">Logout</span>
                    </button>
                </form>
            </li>
        </ul>
    </aside>
    <!-- SIDEBAR -->
    <!-- CONTENT -->
    <main role="main">
        <section id="content">
            <!-- NAVBAR -->
            <nav role="navigation">
                <i class='bx bx-menu'></i>
                <form action="#" role="search">
                    <div class="form-input">
                        <input type="search" placeholder="Search..." aria-label="Search">
                        <button type="submit" class="search-btn"><i class='bx bx-search'></i></button>
                    </div>
                </form>
                <input type="checkbox" id="switch-mode" hidden>
                <label for="switch-mode" class="switch-mode" aria-label="Switch Mode"></label>
                <a href="#" class="notification" aria-label="Notifications">
                    <i class='bx bxs-bell'></i>
                    <span class="num">8</span>
                </a>
                <a href="#" class="profile" aria-label="Profile">
                    <img src="@Url.Content("~/Dashboard_Images/people.png")" alt="User">
                </a>
            </nav>
            <!-- NAVBAR -->
            <main role="main">
                <div class="head-title">
                    <div class="left">
                        <h1>Tasks</h1>
                        <ul class="breadcrumb" aria-label="Breadcrumb">
                            <li>
                                <a href="#">Tasks</a>
                            </li>
                            <li><i class='bx bx-chevron-right'></i></li>
                            <li>
                                <a class="active" href="#">Home</a>
                            </li>
                        </ul>
                    </div>
                </div>

                <div class="container-wrapper">
                    <div class="title-wrapper">
                        <div class="title">Lists</div>
                    </div>
                    <div class= "l-container" id="l-container">
                        <ul>
                        <li>
                            <a href="#" class="Lst" data-listid="@Model.AllListId">All</a>
                        </li>
                        <li>
                            <a href="#" class="Lst" data-listid="@Model.TodayListId">Today</a>
                        </li>
                        <li>
                            <a href="#" class="Lst" data-listid="@Model.TomorrowListId">Tomorrow</a>
                        </li>
                        @foreach (var list in Model.AllLists)
                        {
                            <li>
                                <a href="#" class="Lst" data-listid="@list.ListId">@list.ListTitle</a>
                                <button class="delete-list" data-listid="@list.ListId">Delete</button>
                                <button onclick="showEditListForm(@list.ListId)">Edit</button>
                            </li>
                        }
                        </ul>
                        <button onclick="showCreateListForm()">Create New List</button> <!-- New button for creating a list -->
                        <!-- Create List Form -->
                        <div id="createListForm" style="display: none;">
                            <h3>Create New List</h3>
                            <form asp-action="CreateList" method="post">
                                <input type="text" name="ListTitle" placeholder="List Title" required />
                                <input type="text" name="ListCategory" placeholder="List Category" />
                                <button type="submit">Create</button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="container-wrapper">
                    <div class="title-wrapper">
                        <div class="title">Tasks</div>
                        <span class='plus'><i class='bx bx-plus'></i></span>
                    </div>
                    <div class="t-container" id="t-container">
                        
                        <!-- Tasks will be dynamically added here -->
                    </div>
                    <button onclick="showCreateTaskForm()">Create New Task</button> <!-- New button for creating a task -->
                    <!-- Create Task Form -->
                    <div class="col-md-4">
                        <h3>Create New Task</h3>
                        <form asp-action="CreateTask" method="post" id="createTaskForm">
                            <input type="hidden" id="selectedListId" name="ListId" />
                            <input type="text" name="TaskTitle" placeholder="Task Title" required />
                            <select name="TaskPriority">
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                            </select>
                            <input type="text" name="TaskTag" placeholder="Task Tag" />
                            <input type="date" name="TaskDate" placeholder="Task Date" />
                            <input type="time" name="TaskStartTime" placeholder="Task Start Time" />
                            <input type="time" name="TaskEndTime" placeholder="Task End Time" />
                            <!-- Add more input fields for other properties -->
                            <select name="TaskDifficulty">
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                            </select>
                            <input type="checkbox" name="TaskStatus" id="TaskStatus" />

                            <!-- Add more input fields as needed for other properties -->
                            <button type="submit">Create</button>
                        </form>
                    </div>
                    <div class="col-md-4">
                        <h3>Task Details</h3>
                        <div id="taskDetailsContainer">
                            <!-- Task details will be loaded here dynamically -->
                        </div>
                    </div>

                    <!-- Edit List Form -->
                    <div id="editListForm" style="display: none;">
                        <h3>Edit List</h3>
                        <form asp-action="EditList" method="post">
                            <input type="hidden" name="ListId" />
                            <input type="text" name="ListTitle" placeholder="List Title" required />
                            <input type="text" name="ListCategory" placeholder="List Category" />
                            <button type="button" onclick="editList()">Save</button>
                        </form>
                    </div>

                    <!-- Edit Task Form -->
                    <div id="editTaskForm" style="display: none;">
                        <h3>Edit Task</h3>
                        <form asp-action="EditTask" method="post">
                            <input type="hidden" name="TaskId" />
                            <input type="text" name="TaskTitle" placeholder="Task Title" required />
                            <select name="TaskPriority">
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                            </select>
                            <!-- Add other input fields for editing other properties -->
                            <button type="button" onclick="editTask()">Save</button>
                        </form>
                    </div>
                </div>


                @* <div class="container-wrapper">
                    <div class="title-wrapper">
                        <div class="title">Task Details</div>
                        <span class='plus'><i class='bx bx-plus'></i></span>
                    </div>
                    <div id="details-container">
                        @(Html.PartialAsync("_TaskDetailsPartial", Model.SelectedTask).Result)
                    </div>
                </div> *@
             
            </main>

        </section>
        <script src="@Url.Content("~/js/Dashboard_js")"></script>
@*         <script>
          // Function to retrieve tasks for a specific list via AJAX
function getTasks(listId) {
    console.log("Fetching tasks for listId:", listId); // Debugging line
    $.ajax({
        url: '/Tasks/GetTasksByList', // URL to your controller action method that retrieves tasks by list
        type: 'GET',
        data: { listId: listId },
        success: function (data) {
            console.log("Tasks retrieved:", data); // Debugging line
            // Clear existing tasks
            $('#t-container').empty();
            // Iterate over retrieved tasks and append to the container
            data.forEach(function(task) {
                $('#t-container').append('<p class="Lst">' + task.TaskTitle + '</p>');
            });
        },
        error: function (xhr, status, error) {
            console.error('Error retrieving tasks:', error);
        }
    });
}

// Event listener for clicking on a list
$(document).on('click', '#l-container .Lst', function () {
    var listId = $(this).data('list-id');
    console.log("List clicked:", listId); // Debugging line
    getTasks(listId);
});

// Optionally, load tasks for the "All" list when the page loads
$(document).ready(function () {
    getTasks(0); // Assuming 0 means "All"
});

        </script> *@
        <script>
            $(document).ready(function () {
                // Event delegation for dynamically added elements
                $(document).on('click', '.Lst', function () {
                    var listId = $(this).data('listid');
                    if (listId === @Model.AllListId || listId === @Model.TodayListId || listId === @Model.TomorrowListId) {
                        // Handle All, Today, and Tomorrow lists separately
                        loadSpecialListTasks(listId);
                    } else {
                        loadListTasks(listId);
                    }
                    // Set the selectedListId variable
                    $('#selectedListId').val(listId);
                });

                // Event handler for delete-list button
                $(document).on('click', '.delete-list', function () {
                    var listId = $(this).data('listid');
                    deleteList(listId);
                });
            });

            function loadListTasks(listId) {
                $.ajax({
                    url: '/TimeManagement/ListTasks/' + listId,
                    type: 'GET',
                    success: function (data) {
                        $('#t-container').html(data);
                    }
                });
            }

            function loadTaskDetails(taskId) {
                $.ajax({
                    url: '/TimeManagement/TaskDetails/' + taskId,
                    type: 'GET',
                    success: function (data) {
                        $('#taskDetailsContainer').html(data);
                    }
                });
            }

            function deleteList(listId) {
                // Send an AJAX request to delete the list
                $.ajax({
                    url: '/TimeManagement/DeleteList/' + listId,
                    type: 'POST',
                    success: function (data) {
                        // Refresh the page or update the UI as needed
                        location.reload(); // For example, reload the page
                    }
                });
            }

            function deleteTask(taskId) {
                // Send an AJAX request to delete the task
                $.ajax({
                    url: '/TimeManagement/DeleteTask/' + taskId,
                    type: 'POST',
                    success: function (data) {
                        // Refresh the page or update the UI as needed
                        // For example, reload tasks for the selected list
                        var listId = $('#selectedListId').val();
                        loadListTasks(listId);
                    }
                });
            }

            function loadSpecialListTasks(listId) {
                switch (listId) {
                    case @Model.AllListId:
                        loadAllTasks();
                        break;
                    case @Model.TodayListId:
                        loadTodayTasks();
                        break;
                    case @Model.TomorrowListId:
                        loadTomorrowTasks();
                        break;
                }
            }

            function loadAllTasks() {
                $.ajax({
                    url: '/TimeManagement/AllTasks',
                    type: 'GET',
                    success: function (data) {
                        $('#t-container').html(data);
                    }
                });
            }

            function loadTodayTasks() {
                $.ajax({
                    url: '/TimeManagement/TodayTasks',
                    type: 'GET',
                    success: function (data) {
                        $('#t-container').html(data);
                    }
                });
            }

            function loadTomorrowTasks() {
                $.ajax({
                    url: '/TimeManagement/TomorrowTasks',
                    type: 'GET',
                    success: function (data) {
                        $('#t-container').html(data);
                    }
                });
            }

            function showCreateListForm() {
                $('#createListForm').toggle();
            }

            function showCreateTaskForm() {
                $('#createTaskForm').toggle();
            }

            $('#createListForm form').submit(function (event) {
                event.preventDefault();
                createList();
            });

            $('#createTaskForm form').submit(function (event) {
                event.preventDefault();
                createTask();
            });

            function createList() {
                var listTitle = $('#createListForm input[name="ListTitle"]').val();
                $.ajax({
                    url: '/TimeManagement/CreateList',
                    type: 'POST',
                    data: { ListTitle: listTitle },
                    success: function (data) {
                        // Refresh the page or update the list dynamically
                        location.reload(); // Refresh the page
                    }
                });
            }


            function showEditListForm(listId) {
                // Make an AJAX request to fetch the details of the list with the specified ID
                $.ajax({
                    url: '/TimeManagement/GetListDetails/' + listId,
                    type: 'GET',
                    success: function (data) {
                        // Populate the form fields with the fetched data
                        $('#editListForm input[name="ListId"]').val(data.listId);
                        $('#editListForm input[name="ListTitle"]').val(data.listTitle);
                        $('#editListForm input[name="ListCategory"]').val(data.listCategory);

                        // Display the edit list form
                        $('#editListForm').show();
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching list details:', error);
                    }
                });
            }

            function showEditTaskForm(taskId) {
                // Make an AJAX request to fetch the details of the task with the specified ID
                $.ajax({
                    url: '/TimeManagement/GetTaskDetails/' + taskId,
                    type: 'GET',
                    success: function (data) {
                        // Populate the form fields with the fetched data
                        $('#editTaskForm input[name="TaskId"]').val(data.taskId);
                        $('#editTaskForm input[name="TaskTitle"]').val(data.taskTitle);
                        $('#editTaskForm select[name="TaskPriority"]').val(data.taskPriority);
                        // Populate other fields similarly

                        // Display the edit task form
                        $('#editTaskForm').show();
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching task details:', error);
                    }
                });
            }

            function editList() {
                var listId = $('#editListForm input[name="ListId"]').val();
                var updatedList = {
                    ListId: listId,
                    ListTitle: $('#editListForm input[name="ListTitle"]').val(),
                    ListCategory: $('#editListForm input[name="ListCategory"]').val()
                    // Add other properties as needed
                };

                $.ajax({
                    url: '/TimeManagement/EditList',
                    type: 'POST',
                    data: updatedList,
                    success: function (data) {
                        // Hide the edit form and perform any necessary actions
                        $('#editListForm').hide();
                        // For example, you may want to refresh the page or update the UI
                        location.reload();
                    },
                    error: function (xhr, status, error) {
                        console.error('Error editing list:', error);
                    }
                });
            }

            function editTask() {
                var taskId = $('#editTaskForm input[name="TaskId"]').val();
                var updatedTask = {
                    TaskId: taskId,
                    TaskTitle: $('#editTaskForm input[name="TaskTitle"]').val(),
                    TaskPriority: $('#editTaskForm select[name="TaskPriority"]').val()
                    // Add other properties as needed
                };

                $.ajax({
                    url: '/TimeManagement/EditTask',
                    type: 'POST',
                    data: updatedTask,
                    success: function (data) {
                        // Hide the edit form and perform any necessary actions
                        $('#editTaskForm').hide();
                        // For example, you may want to refresh the page or update the UI
                        location.reload();
                    },
                    error: function (xhr, status, error) {
                        console.error('Error editing task:', error);
                    }
                });
            }

            function createTask() {
                var taskTitle = $('#createTaskForm input[name="TaskTitle"]').val();
                var taskPriority = $('#createTaskForm select[name="TaskPriority"]').val();
                var taskTag = $('#createTaskForm input[name="TaskTag"]').val();
                var taskDate = $('#createTaskForm input[name="TaskDate"]').val();
                var taskStartTime = $('#createTaskForm input[name="TaskStartTime"]').val();
                var taskEndTime = $('#createTaskForm input[name="TaskEndTime"]').val();
                var taskDifficulty = $('#createTaskForm select[name="TaskDifficulty"]').val();

                var listId = $('#selectedListId').val();

                $.ajax({
                    url: '/TimeManagement/CreateTask',
                    type: 'POST',
                    data: {
                        ListId: listId,
                        TaskTitle: taskTitle,
                        TaskPriority: taskPriority,
                        TaskTag: taskTag,
                        TaskDate: taskDate,
                        TaskStartTime: taskStartTime,
                        TaskEndTime: taskEndTime,
                        TaskDifficulty: taskDifficulty,
                        TaskStatus: taskStatus
                    },
                    success: function (data) {
                        // Refresh the page or update the tasks dynamically
                        loadListTasks(listId); // Reload tasks for the selected list
                    }
                });
            }

            function updateTaskStatus(taskId, isChecked) {
                $.ajax({
                    url: '/TimeManagement/UpdateTaskStatus/' + taskId,
                    type: 'POST',
                    data: { id: taskId, isChecked: isChecked }, // Ensure that the checkbox value is correctly passed
                    success: function (data) {
                        // Optionally, update the UI to reflect the new task status
                        console.log('Task status updated successfully');
                    },
                    error: function (xhr, status, error) {
                        console.error('Error updating task status:', error);
                    }
                });
            }
        </script>
</body>
</html>
